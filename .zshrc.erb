<% if v[:local] %>
<%= d.decrypt ".zshrc.local.secrets" %>
<% end %>

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"
<% if v[:local] %>
export CONFIG="local"
<% end %>

# FZF
export FZF_DEFAULT_COMMAND="rg --files --hidden --no-ignore"
ffd() {
  old_dir=$(pwd)
  cd ~
  new_dir=$(find * -maxdepth 2 -type d | fzf)
  if [ -z "$new_dir" ]
  then
    cd $old_dir
  else
    cd $new_dir
  fi
}

fff() {
  file=$(rg --files --hidden | fzf)
  if [ -z "$file" ]
  then
  else
    vim $file
  fi
}

ffc() {
  file=$(rg --hidden . | fzf)
  if [ -z "$file" ]
  then
 else
    vim $(echo $file | sed 's/:.*//g')
  fi
}

<% if v[:local] %>
# yazi file manager
function y() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
   yazi "$@" --cwd-file="$tmp"
    if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
      builtin cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}
<% end %>


# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="catppuccin"

<%= v[:local] && '[ -f /opt/homebrew/etc/profile.d/autojump.sh ] && . /opt/homebrew/etc/profile.d/autojump.sh' %>

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git zsh-vi-mode)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"


# Exports
export EDITOR='vim'

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.

alias ip="ifconfig | grep 192 | grep --color=never -E '[^ ]*$' -o"
alias pubip='dig +short txt ch whoami.cloudflare @1.0.0.1 | sed s/\"//g'
alias src="source ~/.zshrc"
alias c="clear"
alias o="open"
alias dev="cd ~/dev"
alias kc="kubectl"
alias dops="docker ps -a"
alias dopss='docker ps -a --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"'
alias doco="docker compose"

<% if v[:local] %>
alias zrc="nvim ~/dotfiles/.zshrc.erb"

TUI_PROCESSES=("htop" "lazydocker" "lazygit" "nvim" "vim" "yazi" "less")

ccd() {
  local dir="$(realpath "$1")"
  tmux list-panes -a -F '#{session_name}:#{window_index}.#{pane_index} #{pane_pid}' | while read -r pane pid; do
    if ! pgrep -P "$pid" -f "$(printf "%s|" "${TUI_PROCESSES[@]}" | sed 's/|$//')" >/dev/null; then
      tmux send-keys -t "$pane" "cd '$dir'" C-m
    fi
  done
}

jj() {
  tmux list-panes -a -F '#{session_name}:#{window_index}.#{pane_index} #{pane_pid}' | while read -r pane pid; do
    if ! pgrep -P "$pid" -f "$(printf "%s|" "${TUI_PROCESSES[@]}" | sed 's/|$//')" >/dev/null; then
      tmux send-keys -t "$pane" "j '$1'" C-m
    fi
  done
}

alias internet="ping 8.8.8.8"

alias ptags="git push --tags"

alias rm="trash"
alias ld="lazydocker"
alias lg="lazygit"
alias tmx="tmuxinator"
alias v="nvim"

alias br="bin/rails"
alias bex="bundle exec"

alias dfc="dotdotdotfiles compile -p"
alias ddd="dotdotdotfiles"
<% end %>

<% if v[:local] %>
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# place this after nvm initialization!
autoload -U add-zsh-hook

load-nvmrc() {
local nvmrc_path
nvmrc_path="$(nvm_find_nvmrc)"

if [ -n "$nvmrc_path" ]; then
local nvmrc_node_version
nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

if [ "$nvmrc_node_version" = "N/A" ]; then
nvm install
elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
nvm use
fi
elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
echo "Reverting to nvm default version"
nvm use default
fi
}

add-zsh-hook chpwd load-nvmrc
load-nvmrc
<% end %>

<% if v[:local] %>
# psql
export PATH="/opt/homebrew/opt/libpq/bin:$PATH"

# rbenv
eval "$(~/.rbenv/bin/rbenv init - zsh)"

# 1Password
source /Users/samuelraub/.config/op/plugins.sh
<% end %>

# vim: set filetype=bash.eruby:
